@model IEnumerable<IndividualLoginExample.Models.Role>
@{
    ViewBag.Title = "Roles";
}
<h4>Roles</h4>
<p>
    @Html.ActionLink("Create New", "Create")
</p>
<div class="form-inline">
    <div class="col-md-12 col-sm-12 col-xs-12">
        <div class="form-group col-md-3 col-sm-3 col-xs-3">
            <div class="input-group input-group-sm">
                <span class="input-group-addon bold-font">Name Contains</span>
                @Html.TextBox("NameContains", "", new { @class = "form-control" })
            </div>
        </div>
    </div>
    <div class="col-md-12 col-sm-12 col-xs-12">
        <div class="form-group col-md-1 col-sm-1 col-xs-1">
            <div class="input-group input-group-sm">
                <input id="buttonSearch" type="button" class="btn btn-sm btn-default" value="Refresh" />
            </div>
        </div>
    </div>
</div>
<table class="table">
    <thead>
    </thead>
    <tbody>
    </tbody>
</table>

@section scripts {
    <script type="text/javascript">
        
        var tableOfResults = null;

        $(document).ready(function () {

            loadTable();
        });

        function loadTable() {
            if ($.fn.DataTable.isDataTable('.table')) {
                tableOfResults = $('.table').DataTable();
            }
            else {
                tableOfResults = $('.table').DataTable({
                    "dom": '<"top"ltipr><"clear">', // (f)ilter -> removed this, (l)ength, (t)able, (i)nfo summary, (p)agination, p(r)ocessing
                    "pagingType": "full_numbers",
                    "paging": true, // enable paging and page numbers
                    "ordering": false, // disable ordering on all columns
                    "orderMulti": false,
                    "order": [[1, "desc"]],
                    "lengthChange": true,
                    "lengthMenu": [5, 10, 20, 50, 100, 200], //Define the Options Available for changing how many rows would be visible at a time.
                    "pageLength": 10,
                    "processing": true,    //display the processing popup when the data is being retrieved
                    //responsive: true,   consolidate columns when screen is very small
                    "serverSide": true,  //get data for the columns from the server
                    "ajax": {
                        "url": "@Url.Action("RoleDataTableHandler")",//get the data from the TableHandler method
                        "data": function (data) { // use these to send custom parameters instead of the fnServerParams when using sAjaxSource
                            data.NameContains = $('#NameContains').val();
                        },
                        "type": "POST" // set to post to avoid getting error that the request exceeds the maximum query string limit
                    },
                    //"rowCallback": function (row, data, index) {

                    //},
                    "columnDefs": [
                        { "data": "Id", "title": "Id", "targets": 0 },
                        { "data": "Name", "title": "Name", "targets": 1 },
                        { "data": "CreationDateUTC", "title": "CreationDateUTC", "targets": 2, "render": FormatDate }
                    ]
                });
            }
        }

        function FormatDate(data, type, row, meta) {
            //format the returned date from "/Date(123456789876)/" format to regular Date String format (if it's not null)
            if (data == null || data == undefined)
                return ""
            else
                return new Date(parseInt(data.substr(6))).toLocaleString();
        }

        $('input[type="text"]').on("keydown keypress", function (event) {
            var key = event.which || event.keyCode || 0;

            if (key === 13) {
                tableOfResults.ajax.reload();
                event.preventDefault();
            }
        });

        $('#buttonSearch').click(function () {
            tableOfResults.ajax.reload();
        });
    </script>
}